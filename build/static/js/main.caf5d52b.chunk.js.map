{"version":3,"sources":["pages/Lobby/Lobby.js","LobbyAPI.js","config.js","pages/Home/Home.js","Game/components/BottomBar/Deck.js","Game/components/BottomBar/Actions.js","Game/components/BottomBar/BottomBar.js","Game/components/CLS/ChatLog.js","Game/components/CLS/GameView.js","Game/components/CLS/Rules.js","Game/components/CLS/CLS.js","Game/logic/cards.js","Game/components/AnnouncementArea/ChoosingPanel.js","Game/components/AnnouncementArea/AnnouncementArea.js","Game/components/Players/Player.js","Game/components/Players/Players.js","Game/components/YourPlayer/YourPlayer.js","Game/Board.js","Game/logic/initializer.js","Game/logic/actions/helper.js","Game/logic/actions/main.js","Game/logic/actions/intermediary.js","Game/logic/actions/misc.js","Game/logic/messageBuilder.js","Game/Game.js","pages/Room/Room.js","index.js"],"names":["Lobby","props","className","children","href","rel","target","window","location","origin","SERVER_URL","protocol","hostname","LobbyAPI","this","api","ky","create","prefixUrl","numPlayers","post","json","res","gameID","console","log","roomID","id","name","playerID","playerName","playerCredentials","credentials","nextRoomID","get","players","Home","history","useState","room","setRoom","jName","setJName","jNameCount","length","num","setNum","cName","setCName","cNameCount","errMsg","setErrMsg","useEffect","timer","state","invalidRoom","setTimeout","replace","clearTimeout","handleKeyDown","e","text","key","substring","preventDefault","saveInfo","localStorage","setItem","joinRoom","a","getPlayers","filter","player","map","indexOf","find","then","push","document","getElementById","value","style","margin","type","maxLength","spellCheck","autoComplete","onKeyDown","onChange","onPaste","disabled","onClick","min","max","createRoom","Deck","deck","page","setPage","pagesArr","Array","fill","_","i","copyDeck","slice","reverse","pageNum","uniqid","select","startIndex","Math","getPages","card","src","front","alt","character","Actions","G","ctx","moves","yourPlayer","isYourTurn","currentPlayer","canCoup","coins","mustCoup","canAssassinate","done","turnLog","winner","prepAction","action","hidden","successful","activePlayers","classNames","income","BottomBar","revealDeck","isOut","ChatLog","msg","setMsg","objDiv","scrollTop","scrollHeight","chat","msgParts","content","split","msgPart","placeholder","onKeyUp","keyCode","click","handleKeyUp","message","icon","faPaperPlane","statsHdrs","GameView","setRevealDeck","deckView","hdr","statistics","row","entry","Pages","desc","extraDesc","Rules","allOptions","ChatLogSettings","optionIndex","setIndex","rulesPage","setRPage","selection","faCaretLeft","faCaretRight","Card","cards","ChoosingPanel","choices","setChoices","gameOver","newRoomID","myID","getItem","myCredentials","myName","leaveRoom","playAgain","setNewRoom","allow","block","setBlock","challenge","initiateChallenge","temp","flexDirection","alignItems","justifyContent","secondClassName","left","includes","leave","clear","Object","keys","blockedBy","forEach","coup","exchange","drawnCards","cardSelected","hasOwnProperty","newHand","cardID","setHand","responses","AnnouncementArea","msgLoading","setMsgLoading","hand","numToChoose","discarded","isChallenger","challenger","challengeCharacters","characters","loser","challenged","swapCard","executeAction","endTurn","revealedCard","continueTurn","blocksWith","blockedMsg","marginLeft","Player","revealHand","setRevealHand","cardIndex","revealCard","onDragStart","draggable","isCurrentPlayer","parseInt","canSelectPlayer","canRevealHand","targeted","animate","iconColor","getBottomRow","status","setTarget","height","toString","faDoorOpen","faDoorClosed","faSkullCrossbones","faCrown","paddingRight","paddingLeft","color","faThumbsUp","faThumbsDown","Players","index","playOrder","YourPlayer","cardSelectable","cardClass","loseCardAndShuffle","loseCard","fontSize","Board","changeNames","gameMetadata","shuffle","arr","j","floor","random","logTurn","resetResponses","returnToDeck","events","getNewHand","pop","setActivePlayers","all","response","getNumAlivePlayers","others","isBlocked","challengedID","getChallengeCharacters","newCard","shift","playerList","splice","getTurnMsg","success","addendum","challengeSuccess","Coup","minPlayers","maxPlayers","setup","numDuplicates","initializeGame","turn","onBegin","onEnd","logStats","playersAlive","checkForWinner","order","first","next","playOrderPos","nextIndex","getPlayOrder","stages","targetCharacter","indexes","hasCard","round","findIndex","oldHand","newCardID","notUsed","blockOrChallenge","loseAssassinate","idle","CoupClient","Client","game","board","debug","multiplayer","SocketIO","server","Room","useParams","copied","setCopied","setPlayers","show","setShow","interval","setInterval","clearInterval","timeout","getSelection","removeAllRanges","readOnly","execCommand","focus","App","useHistory","exact","path","to","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.caf5d52b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Lobby.scss\";\r\n\r\n// Lobby is the parent component. Home and Room are the children components.\r\nconst Lobby = (props) => {\r\n  return (\r\n    <div className=\"lobby-container\">\r\n      <div className=\"game-title\">online coup</div>\r\n      {props.children}\r\n      <div className=\"game-info\">\r\n        Developed by vyang1222 -{\" \"}\r\n        <a href=\"https://github.com/vyang1222/online-coup\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n          about this project.\r\n        </a>\r\n        {\"\\n\"}\r\n        Based on the original Coup board game by Indie Boards & Cards.\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Lobby;\r\n","import { GAME_NAME, DEFAULT_PORT, APP_PRODUCTION } from \"./config\";\r\nimport ky from \"ky\"; // HTTP client I'm using (saw other people use it, looks like it works fine, and it's pretty simple to use)\r\n\r\nconst { origin, protocol, hostname } = window.location;\r\nconst SERVER_URL = APP_PRODUCTION ? origin : `${protocol}//${hostname}:${DEFAULT_PORT}`;\r\n\r\n// Make HTTP requests (HTTP method, URL endpoint: description) to boardgame.io Lobby REST API\r\nexport class LobbyAPI {\r\n  // create a ky instance\r\n  constructor() {\r\n    this.api = ky.create({\r\n      prefixUrl: `${SERVER_URL}/games/${GAME_NAME}`, // prefix to prepend to URL input\r\n    });\r\n  }\r\n\r\n  // POST /games/{game_name}/create : create a match\r\n  async createRoom(numPlayers) {\r\n    try {\r\n      const res = await this.api.post(\"create\", { json: { numPlayers: numPlayers } }).json();\r\n      return res.gameID;\r\n    } catch (err) {\r\n      console.log(\"failed to create room:\", err);\r\n    }\r\n  }\r\n\r\n  // POST /games/{game_name}/{room_id}/join : join a match\r\n  async joinRoom(roomID, id, name) {\r\n    try {\r\n      const res = await this.api.post(roomID + \"/join\", { json: { playerID: id, playerName: name } }).json();\r\n      const { playerCredentials } = res;\r\n      return playerCredentials;\r\n    } catch (err) {\r\n      console.log(\"failed to join room:\", err);\r\n    }\r\n  }\r\n\r\n  // POST /games/{game_name}/{room_id}/leave : leave a match\r\n  async leaveRoom(roomID, id, playerCredentials) {\r\n    try {\r\n      await this.api.post(roomID + \"/leave\", { json: { playerID: id, credentials: playerCredentials } }).json();\r\n    } catch (err) {\r\n      console.log(\"failed to leave room:\", err);\r\n    }\r\n  }\r\n\r\n  // POST /games/{name}/{id}/playAgain : play again\r\n  async playAgain(roomID, id, playerCredentials) {\r\n    try {\r\n      const res = await this.api\r\n        .post(roomID + \"/playAgain\", { json: { playerID: id, credentials: playerCredentials } })\r\n        .json();\r\n      return res.nextRoomID;\r\n    } catch (err) {\r\n      console.log(\"failed to play again:\", err);\r\n    }\r\n  }\r\n\r\n  // GET /games/{game_name}/{room_id} : get specific match by its matchID\r\n  async getPlayers(roomID) {\r\n    const res = await this.api.get(roomID).json();\r\n    return res.players;\r\n  }\r\n\r\n  /*----------------- TODO: actually use this request... e.g. show available rooms in the lobby ? -----------------*/\r\n\r\n  // GET /games/{game_name} : return an array of all the games\r\n  async getRooms() {\r\n    const res = await this.api.get(\"\").json();\r\n    return res;\r\n  }\r\n}\r\n","export const GAME_NAME = \"Coup\";\r\nexport const DEFAULT_PORT = 8000;\r\nexport const APP_PRODUCTION = process.env.NODE_ENV === \"production\";\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Lobby from \"../Lobby/Lobby\";\r\nimport { LobbyAPI } from \"../../LobbyAPI\";\r\nimport \"./Home.scss\";\r\n\r\nconst api = new LobbyAPI();\r\n\r\nconst Home = (props) => {\r\n  const { history } = props;\r\n  const maxNameLength = 12;\r\n  const roomIDLength = 9;\r\n\r\n  const [room, setRoom] = useState(\"\");\r\n  const [jName, setJName] = useState(\"\");\r\n  const jNameCount = maxNameLength - jName.length;\r\n  const [num, setNum] = useState(2);\r\n  const [cName, setCName] = useState(\"\");\r\n  const cNameCount = maxNameLength - cName.length;\r\n  const [errMsg, setErrMsg] = useState(\"\");\r\n\r\n  // handle URL to a room that doesn't exist\r\n  useEffect(() => {\r\n    let timer;\r\n    if (history.location.state && history.location.state.invalidRoom) {\r\n      setErrMsg(\"room does not exist!\");\r\n      // reset error message\r\n      timer = setTimeout(() => {\r\n        setErrMsg(\"\");\r\n        history.replace();\r\n      }, 4000);\r\n    }\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [history]);\r\n\r\n  // restrict inputs, specifically spaces (inspired by https://secret-hitler.online/)\r\n  const handleKeyDown = (e, text) => {\r\n    if (e.key === \" \") {\r\n      if (text) {\r\n        if (text.length === 0 || text.substring(text.length - 1, text.length) === \" \") {\r\n          e.preventDefault();\r\n        }\r\n      } else {\r\n        e.preventDefault();\r\n      }\r\n    }\r\n  };\r\n\r\n  // store user information to localStorage to use later when we arrive at the room\r\n  const saveInfo = (name, id, credentials) => {\r\n    localStorage.setItem(\"name\", name);\r\n    localStorage.setItem(\"id\", id);\r\n    localStorage.setItem(\"credentials\", credentials);\r\n  };\r\n\r\n  const joinRoom = async (roomID, name) => {\r\n    try {\r\n      const players = await api.getPlayers(roomID);\r\n      const uniqueName =\r\n        players\r\n          .filter((player) => player.name)\r\n          .map((player) => player.name)\r\n          .indexOf(name) === -1;\r\n      if (uniqueName) {\r\n        // find first empty seat\r\n        const id = players.find((player) => !player.name).id;\r\n        api.joinRoom(roomID, id, name).then((credentials) => {\r\n          saveInfo(name, id, credentials);\r\n          history.push(\"/rooms/\" + roomID);\r\n        });\r\n      } else {\r\n        // handle name conflict error\r\n        setErrMsg(\"name already taken!\");\r\n        setJName(\"\");\r\n        document.getElementById(\"joinName\").value = \"\";\r\n      }\r\n    } catch (err) {\r\n      /*\r\n       * --- TO-DO: setErrMsg(\"room is full\") here if that's the case. currently it's \"room does not exist\" in both cases ---\r\n       */ \r\n      setErrMsg(\"room does not exist!\");\r\n      setRoom(\"\");\r\n      document.getElementById(\"roomIdentification\").value = \"\";\r\n    }\r\n  };\r\n\r\n  const createRoom = () => {\r\n    api.createRoom(num).then((roomID) => {\r\n      joinRoom(roomID, cName);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Lobby>\r\n      <span className=\"title join-title\">join game</span>\r\n      <div className=\"input-info-area\">\r\n        <p style={{ margin: \"0\" }}>room id</p>\r\n      </div>\r\n      <input\r\n        id=\"roomIdentification\"\r\n        type=\"text\"\r\n        maxLength={`${roomIDLength}`}\r\n        spellCheck=\"false\"\r\n        autoComplete=\"off\"\r\n        onKeyDown={(e) => handleKeyDown(e)}\r\n        onChange={(e) => setRoom(e.target.value)}\r\n        className=\"input-field\"\r\n      />\r\n      <div className=\"input-info-area\">\r\n        <p style={{ margin: \"0\" }}>your name</p>\r\n        <p style={{ margin: \"0 0 0 auto\" }}>{jNameCount}</p>\r\n      </div>\r\n      <div className=\"user-input\">\r\n        <input\r\n          id=\"joinName\"\r\n          type=\"text\"\r\n          maxLength={`${maxNameLength}`}\r\n          spellCheck=\"false\"\r\n          autoComplete=\"off\"\r\n          onKeyDown={(e) => handleKeyDown(e, jName)}\r\n          onChange={(e) => setJName(e.target.value)}\r\n          onPaste={(e) => e.preventDefault()}\r\n          className=\"input-field\"\r\n        />\r\n      </div>\r\n      <button\r\n        className=\"lobby-btn\"\r\n        disabled={room.length !== roomIDLength || jName.length === 0}\r\n        onClick={() => joinRoom(room, jName)}\r\n      >\r\n        join\r\n      </button>\r\n      <div className=\"error-msg\">{errMsg}</div>\r\n      <span className=\"title create-title\">create lobby</span>\r\n      <div className=\"input-info-area\">\r\n        <p style={{ margin: \"0\" }}># players: {num}</p>\r\n      </div>\r\n      <input\r\n        type=\"range\"\r\n        min=\"2\"\r\n        max=\"8\"\r\n        value={num}\r\n        autoComplete=\"off\"\r\n        onChange={(e) => setNum(e.target.value)}\r\n        className=\"input-slider\"\r\n      />\r\n      <div className=\"input-info-area\">\r\n        <p style={{ margin: \"0\" }}>your name</p>\r\n        <p style={{ margin: \"0 0 0 auto\" }}>{cNameCount}</p>\r\n      </div>\r\n      <div className=\"user-input\">\r\n        <input\r\n          type=\"text\"\r\n          maxLength={`${maxNameLength}`}\r\n          spellCheck=\"false\"\r\n          autoComplete=\"off\"\r\n          onKeyDown={(e) => handleKeyDown(e, cName)}\r\n          onChange={(e) => setCName(e.target.value)}\r\n          onPaste={(e) => e.preventDefault()}\r\n          className=\"input-field\"\r\n        />\r\n      </div>\r\n      <button className=\"lobby-btn\" disabled={cName.length === 0} onClick={createRoom}>\r\n        create\r\n      </button>\r\n    </Lobby>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport uniqid from \"uniqid\";\r\n\r\nimport \"./Deck.scss\";\r\n\r\nconst numPages = 2;\r\n\r\nconst Deck = ({ deck }) => {\r\n  const [page, setPage] = useState(1);\r\n\r\n  const pagesArr = Array(numPages)\r\n    .fill()\r\n    .map((_, i) => i + 1);\r\n\r\n  const copyDeck = deck.slice().reverse();\r\n\r\n  const select = (pageNum) => {\r\n    setPage(pageNum);\r\n  };\r\n\r\n  const getPages = () => {\r\n    const startIndex = (page - 1) * 10;\r\n    return copyDeck.slice(startIndex, Math.min(startIndex + 10, deck.length));\r\n  };\r\n\r\n  return (\r\n    <div className=\"deck-container\">\r\n      <div>\r\n        <div className=\"deck-title\">Deck:</div>\r\n        <div>\r\n          {pagesArr.map((pageNum) => (\r\n            <button\r\n              key={uniqid()}\r\n              onClick={() => select(pageNum)}\r\n              className={`page-btn ${page === pageNum ? \"btn-selected\" : \"btn-unselected\"}`}\r\n            >\r\n              {pageNum}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"deck-cards-container\">\r\n        {getPages().map((card) => (\r\n          <img\r\n            key={uniqid()}\r\n            src={`${card.front.replace(\".PNG\", \"-small.PNG\")}`}\r\n            className=\"character-card-small\"\r\n            alt={card.character}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Deck;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport \"./Actions.scss\";\r\n\r\nconst Actions = ({ G, ctx, playerID, moves }) => {\r\n  const yourPlayer = G.players[playerID];\r\n  const isYourTurn = ctx.currentPlayer === playerID;\r\n\r\n  // game specifications for actions\r\n  const canCoup = yourPlayer.coins >= 7;\r\n  const mustCoup = yourPlayer.coins >= 10;\r\n  const canAssassinate = yourPlayer.coins >= 3;\r\n  const done = ctx.currentPlayer === G.turnLog.player.id || G.winner.id !== \"-1\"; // cannot select actions\r\n\r\n  const income = () => {\r\n    moves.income();\r\n  };\r\n\r\n  const prepAction = (action) => {\r\n    moves.prepAction(action);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      hidden={\r\n        G.turnLog.action === \"exchange\" &&\r\n        G.turnLog.successful &&\r\n        ctx.activePlayers[playerID] === \"action\" &&\r\n        isYourTurn\r\n      }\r\n    >\r\n      <div className={classNames(\"general-actions\", { \"actions-active-enter\": isYourTurn })}>\r\n        <div className=\"btn-wrapper\">\r\n          <button className=\"action-btn\" onClick={income} disabled={!isYourTurn || mustCoup || done}>\r\n            income\r\n          </button>\r\n        </div>\r\n        <div className=\"btn-wrapper\">\r\n          <button\r\n            className=\"action-btn\"\r\n            onClick={() => prepAction(\"foreign aid\")}\r\n            disabled={!isYourTurn || mustCoup || done}\r\n          >\r\n            foreign aid\r\n          </button>\r\n        </div>\r\n        <div className=\"btn-wrapper\">\r\n          <button className=\"action-btn\" onClick={() => prepAction(\"coup\")} disabled={!isYourTurn || !canCoup || done}>\r\n            coup\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className={classNames(\"character-actions\", { \"actions-active-enter\": isYourTurn })}>\r\n        <div className=\"btn-wrapper\">\r\n          <button className=\"action-btn\" onClick={() => prepAction(\"tax\")} disabled={!isYourTurn || mustCoup || done}>\r\n            tax\r\n          </button>\r\n        </div>\r\n        <div className=\"btn-wrapper\">\r\n          <button\r\n            className=\"action-btn\"\r\n            onClick={() => prepAction(\"assassinate\")}\r\n            disabled={!isYourTurn || !canAssassinate || mustCoup || done}\r\n          >\r\n            assassinate\r\n          </button>\r\n        </div>\r\n        <div className=\"btn-wrapper\">\r\n          <button className=\"action-btn\" onClick={() => prepAction(\"steal\")} disabled={!isYourTurn || mustCoup || done}>\r\n            steal\r\n          </button>\r\n        </div>\r\n        <div className=\"btn-wrapper\">\r\n          <button\r\n            className=\"action-btn\"\r\n            onClick={() => prepAction(\"exchange\")}\r\n            disabled={!isYourTurn || mustCoup || done}\r\n          >\r\n            exchange\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Actions;\r\n","import React from \"react\";\r\nimport Deck from \"./Deck\";\r\nimport Actions from \"./Actions\";\r\n\r\nimport \"./BottomBar.scss\";\r\n\r\nconst BottomBar = ({ G, ctx, playerID, moves, revealDeck }) =>\r\n  G.winner.id !== \"-1\" || G.players[playerID].isOut ? (\r\n    revealDeck ? (\r\n      <Deck deck={G.deck} />\r\n    ) : (\r\n      \"\"\r\n    )\r\n  ) : (\r\n    <Actions G={G} ctx={ctx} playerID={playerID} moves={moves} />\r\n  );\r\n\r\nexport default BottomBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uniqid from \"uniqid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./ChatLog.scss\";\r\n\r\nconst handleKeyUp = (e) => {\r\n  e.preventDefault();\r\n  if (e.keyCode === 13) {\r\n    // enter key: another way to send a message\r\n    document.getElementById(\"send-button\").click();\r\n  }\r\n};\r\n\r\nconst ChatLog = ({ G, playerID, moves }) => {\r\n  const [msg, setMsg] = useState(\"\");\r\n\r\n  const message = (content) => {\r\n    moves.message(playerID, content);\r\n    document.getElementById(\"player-msg\").value = \"\";\r\n    setMsg(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    // when a new message appear, automatically scroll chat box (when applicable) to bottom to show it\r\n    let objDiv = document.getElementById(\"scrollBottom\");\r\n    objDiv.scrollTop = objDiv.scrollHeight;\r\n  }, [G.chat]);\r\n\r\n  return (\r\n    <>\r\n      <div id=\"scrollBottom\" className=\"msgs\">\r\n        {G.chat.map((msg) => {\r\n          let className = \"msg \";\r\n          if (msg.id === \"-1\") {\r\n            let msgParts = msg.content.split(\"\\n\");\r\n            className += \"bot-msg \";\r\n            return (\r\n              <div id=\"playerMsg\" className={className} key={uniqid()}>\r\n                <span className={msg.successful ? \"successful-color\" : \"unsuccessful-color\"}>{msgParts[0]}</span>\r\n                <div className=\"addendums\">\r\n                  {msgParts.slice(1, msgParts.length).map((msgPart) => (\r\n                    <div key={uniqid()}>{msgPart}</div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            );\r\n          } else {\r\n            return (\r\n              <div id=\"playerMsg\" className={className} key={uniqid()}>\r\n                <span className=\"msg-sender\">{G.players[msg.id].name + \": \"}</span>\r\n                {msg.content}\r\n              </div>\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n      <div className=\"chat-form\">\r\n        <input\r\n          id=\"player-msg\"\r\n          type=\"text\"\r\n          maxLength=\"70\"\r\n          placeholder=\"Enter Message\"\r\n          onChange={(e) => setMsg(e.target.value)}\r\n          onKeyUp={(e) => handleKeyUp(e)}\r\n          autoComplete=\"off\"\r\n        />\r\n        <button id=\"send-button\" className=\"send-btn\" onClick={() => message(msg)} disabled={msg.length === 0}>\r\n          <FontAwesomeIcon icon={faPaperPlane} />\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatLog;\r\n","import React from \"react\";\r\nimport uniqid from \"uniqid\";\r\n\r\nimport \"./GameView.scss\";\r\n\r\nconst statsHdrs = [\r\n  \"Action\",\r\n  <span className=\"successful-color\">✔</span>,\r\n  <span className=\"unsuccessful-color\">✘</span>,\r\n  <span className=\"counteraction-color\">⚒</span>,\r\n  <span className=\"counteraction-color\">⚔</span>,\r\n];\r\n\r\nconst GameView = ({ G, playerID, revealDeck, setRevealDeck }) => {\r\n  const player = G.players[playerID];\r\n\r\n  const updateReveal = () => {\r\n    setRevealDeck(!revealDeck);\r\n  };\r\n\r\n  const deckView = (\r\n    <>\r\n      <button className={revealDeck ? \"btn-selected\" : \"btn-unselected\"} onClick={() => updateReveal()}>\r\n        {revealDeck ? \"hide\" : \"reveal\"} deck\r\n      </button>\r\n      <div>click on a player to reveal/hide their hand</div>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div className=\"gameview-container\">\r\n      <table className=\"gameview-table\">\r\n        <thead>\r\n          <tr>\r\n            {statsHdrs.map((hdr) => (\r\n              <th key={uniqid()}>{hdr}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {G.statistics.map((row) => {\r\n            return (\r\n              <tr key={uniqid()}>\r\n                {row.map((entry) => (\r\n                  <td key={uniqid()} className=\"stat-desc\">\r\n                    {entry}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"stat-legend\">\r\n        <span>\r\n          {statsHdrs[1]}/{statsHdrs[2]}: # successful/unsuccessful\r\n        </span>\r\n        <span>\r\n          {statsHdrs[3]}/{statsHdrs[4]}: # direct blocks/challenges\r\n        </span>\r\n      </div>\r\n      <div className=\"deckview-container\">\r\n        {player.isOut || G.winner.id !== \"-1\" ? (\r\n          deckView\r\n        ) : (\r\n          <span className=\"deck-info\">{`Deck: ${G.deck.length} cards`}</span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameView;\r\n","import React from \"react\";\r\nimport uniqid from \"uniqid\";\r\n\r\nimport \"./Rules.scss\";\r\n\r\nconst genDescs = [\r\n  [\"Income\", \"take 1 coin\"],\r\n  [\"Foreign Aid\", \"take 2 coins\"],\r\n  [\"Coup\", \"pay 7 coins\", \"choose player to lose guessed character upon correct guess\"],\r\n];\r\n\r\nconst charActDescs = [\r\n  [\"Tax\", \"Duke\", \"take 3 coins\"],\r\n  [\"Assassinate\", \"Assassin\", \"pay 3 coins\", \"choose player to lose a character\"],\r\n  [\"Steal\", \"Captain\", \"take at most 2 coins from another player\"],\r\n  [\"Exchange\", \"Ambassador\", \"exchange hand with top 2 cards of deck\"],\r\n];\r\n\r\nconst counterActDesc = [\r\n  [\"Duke\", \"blocks foreign aid\"],\r\n  [\"Ambassador\", \"blocks stealing\"],\r\n  [\"Captain\", \"blocks stealing\"],\r\n  [\"Contessa\", \"blocks assassination\"],\r\n];\r\n\r\nconst numPages = 3;\r\n\r\nconst pagesArr = Array(numPages)\r\n  .fill()\r\n  .map((_, i) => i + 1);\r\n\r\nconst Page1 = (\r\n  <>\r\n    <div className=\"rules-intro-container\">\r\n      <span className=\"rules-intro\">take one action</span>\r\n      <span className=\"rules-intro-footer\">(If 10+ coins must choose to launch Coup)</span>\r\n    </div>\r\n    <div className=\"rules-desc-container\">\r\n      <span className=\"rules-title\">General Actions</span>\r\n      <table className=\"rules-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Action</th>\r\n            <th>Effect</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {genDescs.map((desc) => {\r\n            return (\r\n              <tr key={uniqid()}>\r\n                <td>{desc[0]}</td>\r\n                <td>\r\n                  <div className=\"action-description\">\r\n                    {desc[1]}\r\n                    {desc.slice(2).map((extraDesc) => (\r\n                      <span className=\"extra-desc\" key={uniqid()}>\r\n                        {extraDesc}\r\n                      </span>\r\n                    ))}\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </>\r\n);\r\n\r\nconst Page2 = (\r\n  <>\r\n    <div className=\"rules-desc-container\">\r\n      <div className=\"rules-title\">Character Actions</div>\r\n      <table className=\"rules-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Action</th>\r\n            <th>Effect</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {charActDescs.map((desc) => {\r\n            return (\r\n              <tr className=\"character-action-entry\" key={uniqid()}>\r\n                <td>\r\n                  {desc[0]}\r\n                  <div className=\"character-footer\">({desc[1]})</div>\r\n                </td>\r\n                <td>\r\n                  <div className=\"action-description\">\r\n                    {desc[2]}\r\n                    {desc.slice(3).map((extraDesc) => (\r\n                      <span className=\"extra-desc\" key={uniqid()}>\r\n                        {extraDesc}\r\n                      </span>\r\n                    ))}\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </>\r\n);\r\n\r\nconst Page3 = (\r\n  <>\r\n    <div className=\"rules-desc-container\">\r\n      <div className=\"rules-title\">Counteractions</div>\r\n      <table className=\"rules-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Character</th>\r\n            <th>Counteraction</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {counterActDesc.map((desc) => {\r\n            return (\r\n              <tr key={uniqid()}>\r\n                <td>{desc[0]}</td>\r\n                <td>\r\n                  <div className=\"action-description\">\r\n                    {desc[1]}\r\n                    {desc.slice(2).map((extraDesc) => (\r\n                      <span className=\"extra-desc\" key={uniqid()}>\r\n                        {extraDesc}\r\n                      </span>\r\n                    ))}\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </>\r\n);\r\n\r\nconst Pages = [Page1, Page2, Page3];\r\n\r\nconst Rules = ({ page, setPage }) => {\r\n  const select = (pageNum) => {\r\n    setPage(pageNum);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {Pages[page - 1]}\r\n      <div className=\"rules-pagebar\">\r\n        {pagesArr.map((pageNum) => (\r\n          <button\r\n            key={uniqid()}\r\n            onClick={() => select(pageNum)}\r\n            className={`page-btn ${page === pageNum ? \"btn-selected\" : \"btn-unselected\"}`}\r\n          >\r\n            {pageNum}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Rules;\r\n","import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCaretRight, faCaretLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport ChatLog from \"./ChatLog\";\r\nimport GameView from \"./GameView\";\r\nimport Rules from \"./Rules\";\r\n\r\nimport \"./CLS.scss\";\r\n\r\nconst allOptions = [\"chat & log\", \"game view\", \"rules\"];\r\n\r\nconst ChatLogSettings = ({ G, ctx, playerID, moves, revealDeck, setRevealDeck }) => {\r\n  const [optionIndex, setIndex] = useState(0);\r\n  const [rulesPage, setRPage] = useState(1);\r\n\r\n  const left = () => {\r\n    if (optionIndex - 1 < 0) {\r\n      setIndex(allOptions.length - 1);\r\n    } else {\r\n      setIndex(optionIndex - 1);\r\n    }\r\n  };\r\n\r\n  const right = () => {\r\n    if (optionIndex + 1 > allOptions.length - 1) {\r\n      setIndex(0);\r\n    } else {\r\n      setIndex(optionIndex + 1);\r\n    }\r\n  };\r\n\r\n  const selection = allOptions[optionIndex];\r\n\r\n  const option = () => {\r\n    if (selection === \"chat & log\") {\r\n      return <ChatLog G={G} playerID={playerID} moves={moves} />;\r\n    } else if (selection === \"game view\") {\r\n      return <GameView G={G} playerID={playerID} revealDeck={revealDeck} setRevealDeck={setRevealDeck} />;\r\n    } else if (selection === \"rules\") {\r\n      return <Rules page={rulesPage} setPage={setRPage} />;\r\n    }\r\n  };\r\n\r\n  // bot message is just output of turn log's message\r\n  return (\r\n    <div className=\"cls-container\">\r\n      <div className=\"cls-header\">\r\n        <span className=\"left-option\" onClick={() => left()}>\r\n          <FontAwesomeIcon icon={faCaretLeft} />\r\n        </span>\r\n        <span className=\"cls-title\">{selection}</span>\r\n        <span className=\"right-option\" onClick={() => right()}>\r\n          <FontAwesomeIcon icon={faCaretRight} />\r\n        </span>\r\n      </div>\r\n      {option()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatLogSettings;\r\n","// Create character cards\r\nexport const Card = (character, front) => ({\r\n  character,\r\n  front,\r\n});\r\n\r\nexport const cards = [\r\n  Card(\"Duke\", \"/images/duke.PNG\"),\r\n  Card(\"Assassin\", \"/images/assassin.PNG\"),\r\n  Card(\"Captain\", \"/images/captain.PNG\"),\r\n  Card(\"Ambassador\", \"/images/ambassador.PNG\"),\r\n  Card(\"Contessa\", \"/images/contessa.PNG\"),\r\n];\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uniqid from \"uniqid\";\r\nimport classNames from \"classnames\";\r\nimport { cards } from \"../../logic/cards\";\r\nimport \"./ChoosingPanel.scss\";\r\nimport { LobbyAPI } from \"../../../LobbyAPI\";\r\n\r\nconst api = new LobbyAPI();\r\n\r\nconst ChoosingPanel = ({ G, ctx, playerID, moves, gameID }) => {\r\n  const [choices, setChoices] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (G.gameOver.newRoomID !== \"\") {\r\n      const myID = localStorage.getItem(\"id\");\r\n      const myCredentials = localStorage.getItem(\"credentials\");\r\n      const myName = localStorage.getItem(\"name\");\r\n      api.leaveRoom(gameID, myID, myCredentials).then(() => {\r\n        api.joinRoom(G.gameOver.newRoomID, myID, myName).then((credentials) => {\r\n          localStorage.setItem(\"credentials\", credentials);\r\n          window.location.href = \"/rooms/\" + G.gameOver.newRoomID;\r\n        });\r\n      });\r\n    }\r\n  }, [G.gameOver.newRoomID, gameID]);\r\n\r\n  useEffect(() => {\r\n    if (G.gameOver.playAgain.length === ctx.numPlayers) {\r\n      if (G.gameOver.newRoomID === \"\" && playerID === G.gameOver.playAgain[0]) {\r\n        api.createRoom(ctx.numPlayers).then((roomID) => {\r\n          moves.setNewRoom(roomID);\r\n        });\r\n      }\r\n    }\r\n\r\n    const isYourTurn = playerID === ctx.currentPlayer;\r\n\r\n    const coup = (character) => {\r\n      moves.coup(character);\r\n    };\r\n\r\n    const setHand = (cardID) => {\r\n      moves.setHand(cardID);\r\n    };\r\n\r\n    const allow = () => {\r\n      moves.allow(playerID);\r\n    };\r\n\r\n    const block = () => {\r\n      moves.block(playerID);\r\n    };\r\n\r\n    const setBlock = (character) => {\r\n      moves.block(playerID, character);\r\n    };\r\n\r\n    const challenge = () => {\r\n      moves.initiateChallenge(playerID);\r\n    };\r\n\r\n    const leaveRoom = () => {\r\n      moves.leave(playerID);\r\n      api.leaveRoom(gameID, localStorage.getItem(\"id\"), localStorage.getItem(\"credentials\")).then(() => {\r\n        // leaving clears your localStorage to \"reset\" your identity and then takes you to homepage\r\n        localStorage.clear();\r\n        window.location.href = \"/\";\r\n      });\r\n    };\r\n\r\n    const playAgain = () => {\r\n      moves.playAgain(playerID);\r\n    };\r\n\r\n    let temp = [];\r\n\r\n    // TODO: let players leave anytime (AKA they are \"out\" to the other players to skip over leaving player's turn)\r\n    // game has ended: let players leave.\r\n    if (G.winner.id !== \"-1\") {\r\n      document.getElementById(\"choosing_panel\").style.flexDirection = \"column\";\r\n      document.getElementById(\"choosing_panel\").style.alignItems = \"center\";\r\n      document.getElementById(\"choosing_panel\").style.justifyContent = \"flex-start\";\r\n      let secondClassName = \"\";\r\n      if (G.gameOver.left.length !== 0) {\r\n        secondClassName = \"play-again-disabled\";\r\n      } else if (G.gameOver.playAgain.includes(playerID)) {\r\n        secondClassName = \"play-again-selected\";\r\n      }\r\n      temp.push(\r\n        <button\r\n          key={uniqid()}\r\n          className={`play-again-btn ${secondClassName}`}\r\n          onClick={playAgain}\r\n          disabled={G.gameOver.left.length !== 0 || G.gameOver.playAgain.includes(playerID)}\r\n        >\r\n          play again [{G.gameOver.left.length !== 0 ? \"N/A\" : `${G.gameOver.playAgain.length}/${ctx.numPlayers}`}]\r\n        </button>\r\n      );\r\n      temp.push(\r\n        <button key={uniqid()} className=\"leave-btn\" onClick={leaveRoom}>\r\n          leave\r\n        </button>\r\n      );\r\n    }\r\n    // for blocking steal: show character choices that can block steal (ambassador, captain)\r\n    else if (\r\n      G.turnLog.action === \"steal\" &&\r\n      Object.keys(G.turnLog.blockedBy).length !== 0 &&\r\n      G.turnLog.blockedBy.character === \"\" &&\r\n      ctx.activePlayers[playerID] === \"blockOrChallenge\"\r\n    ) {\r\n      temp.push(\r\n        <img\r\n          key={uniqid()}\r\n          className=\"character-choice\"\r\n          onClick={() => setBlock(\"Ambassador\")}\r\n          src={\"/images/ambassador.PNG\"}\r\n          alt={\"Ambassador\"}\r\n        />\r\n      );\r\n      temp.push(\r\n        <img\r\n          key={uniqid()}\r\n          className=\"character-choice\"\r\n          onClick={() => setBlock(\"Captain\")}\r\n          src={\"/images/captain.PNG\"}\r\n          alt={\"Captain\"}\r\n        />\r\n      );\r\n    }\r\n    // for coup: show all possible cards to select a targeted character\r\n    else if (G.turnLog.action === \"coup\" && isYourTurn) {\r\n      // image loading optimization (with hidden)\r\n      cards.forEach((card) => {\r\n        temp.push(\r\n          <img\r\n            key={uniqid()}\r\n            className=\"character-choice\"\r\n            onClick={() => {\r\n              coup(card.character);\r\n            }}\r\n            src={card.front}\r\n            alt={card.character}\r\n            hidden={Object.keys(G.turnLog.target).length === 0}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    // show the top two cards\r\n    else if (G.turnLog.action === \"exchange\" && isYourTurn) {\r\n      // image loading optimization with hidden\r\n      G.turnLog.exchange.drawnCards.forEach((card) => {\r\n        const cardSelected =\r\n          G.turnLog.exchange.hasOwnProperty(\"newHand\") && G.turnLog.exchange.newHand.includes(card.id);\r\n        temp.push(\r\n          <img\r\n            key={\"choice\" + card.character}\r\n            className={classNames(\"big-character-choice\", {\r\n              \"card-selected\": cardSelected,\r\n            })}\r\n            onClick={() => {\r\n              setHand(card.id);\r\n            }}\r\n            src={card.front}\r\n            alt={card.character}\r\n            hidden={!G.turnLog.successful || ctx.activePlayers[playerID] !== \"action\"}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    // show possible player responses\r\n    else if (!G.players[playerID].isOut && G.turnLog.responses[playerID] === \"\") {\r\n      if (ctx.activePlayers[playerID] === \"block\") {\r\n        temp.push(\r\n          <button key={uniqid()} className=\"choice-btn\" onClick={allow}>\r\n            allow\r\n          </button>\r\n        );\r\n        temp.push(\r\n          <button key={uniqid()} className=\"choice-btn\" onClick={block}>\r\n            block\r\n          </button>\r\n        );\r\n      } else if (ctx.activePlayers[playerID] === \"challenge\") {\r\n        temp.push(\r\n          <button key={uniqid()} className=\"choice-btn\" onClick={allow}>\r\n            allow\r\n          </button>\r\n        );\r\n        temp.push(\r\n          <button key={uniqid()} className=\"choice-btn\" onClick={challenge}>\r\n            challenge\r\n          </button>\r\n        );\r\n      } else if (ctx.activePlayers[playerID] === \"blockOrChallenge\") {\r\n        temp.push(\r\n          <button key={uniqid()} className=\"choice-btn\" onClick={allow}>\r\n            allow\r\n          </button>\r\n        );\r\n        temp.push(\r\n          <button key={uniqid()} className=\"choice-btn\" onClick={block}>\r\n            block\r\n          </button>\r\n        );\r\n        temp.push(\r\n          <button key={uniqid()} className=\"choice-btn\" onClick={challenge}>\r\n            challenge\r\n          </button>\r\n        );\r\n      }\r\n    }\r\n    setChoices(temp);\r\n  }, [\r\n    G.turnLog,\r\n    G.players,\r\n    G.gameOver,\r\n    ctx.currentPlayer,\r\n    ctx.numPlayers,\r\n    ctx.activePlayers,\r\n    playerID,\r\n    moves,\r\n    G.winner.id,\r\n    gameID,\r\n  ]);\r\n\r\n  return <div id=\"choosing_panel\">{choices}</div>;\r\n};\r\n\r\nexport default ChoosingPanel;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport ChoosingPanel from \"./ChoosingPanel\";\r\nimport \"./AnnouncementArea.scss\";\r\n\r\nconst AnnouncementArea = (props) => {\r\n  const { G, ctx, playerID, moves } = props;\r\n  const isYourTurn = playerID === ctx.currentPlayer;\r\n  const name = isYourTurn ? \"you\" : `${G.players[ctx.currentPlayer].name}`;\r\n\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [msgLoading, setMsgLoading] = useState(true);\r\n\r\n  // display at beginning of turn \r\n  useEffect(() => {\r\n    setMsg(isYourTurn ? `${name}r turn` : `${name}'s turn`);\r\n    setMsgLoading(true);\r\n  }, [ctx.currentPlayer, isYourTurn, name]);\r\n\r\n  const hand = G.players[playerID].hand;\r\n\r\n  // bulk of announcements happen here (i.e. the middle of the turn):\r\n  useEffect(() => {\r\n    const playerTargetedActions = [\"coup\", \"assassinate\", \"steal\"];\r\n    let timer;\r\n\r\n    // on successful assassination\r\n    if (ctx.activePlayers[G.turnLog.target.id] === \"loseAssassinate\") {\r\n      if (G.turnLog.target.id === playerID) {\r\n        setMsg(\"choose an influence to give up (assassinated).\");\r\n        setMsgLoading(false);\r\n      } else {\r\n        setMsg(\r\n          `waiting for ${G.turnLog.target.name} to give up an influence (assassinated)`\r\n        );\r\n        setMsgLoading(true);\r\n      }\r\n    }\r\n\r\n    // on successful exchange\r\n    else if (\r\n      G.turnLog.successful &&\r\n      G.turnLog.action === \"exchange\" &&\r\n      ctx.activePlayers[ctx.currentPlayer] === \"action\"\r\n    ) {\r\n      if (G.turnLog.player.id === playerID) {\r\n        const numToChoose = hand.filter((card) => !card.discarded).length;\r\n        setMsg(\r\n          `choose your new hand (${numToChoose}).\\n the top two cards from the deck are:`\r\n        );\r\n        setMsgLoading(false);\r\n      } else {\r\n        setMsg(`waiting for ${G.turnLog.player.name} to complete the exchange`);\r\n        setMsgLoading(true);\r\n      }\r\n    }\r\n\r\n    // on challenge\r\n    else if (Object.keys(G.turnLog.challenge).length !== 0) {\r\n      const isChallenger = G.turnLog.challenge.challenger.id === playerID;\r\n      const challengeCharacters =\r\n        G.turnLog.challenge.characters.length === 1\r\n          ? `${G.turnLog.challenge.characters[0]}`\r\n          : `${G.turnLog.challenge.characters[0]} or ${G.turnLog.challenge.characters[1]}`;\r\n      // right after challenge\r\n      if (Object.keys(G.turnLog.challenge.loser).length === 0) {\r\n        if (G.turnLog.challenge.challenged.id === playerID) {\r\n          setMsg(\r\n            `${G.turnLog.challenge.challenger.name} challenges!\\n Reveal ${challengeCharacters} or give up a card.`\r\n          );\r\n          setMsgLoading(false);\r\n        } else {\r\n          setMsg(\r\n            `${\r\n              isChallenger ? \"you\" : G.turnLog.challenge.challenger.name\r\n            } challenge${isChallenger ? \"\" : \"s\"}!\\n Waiting for ${\r\n              G.turnLog.challenge.challenged.name\r\n            }'s response`\r\n          );\r\n          setMsgLoading(true);\r\n        }\r\n      }\r\n      // after deciding loser of the challenge\r\n      else {\r\n        if (ctx.activePlayers[G.turnLog.challenge.loser.id] === \"loseCard\") {\r\n          if (G.turnLog.challenge.loser.id === playerID) {\r\n            setMsg(\"choose an influence to give up (challenge lost).\");\r\n            setMsgLoading(false);\r\n          } else {\r\n            setMsg(\r\n              `${\r\n                G.turnLog.challenge.challenged.id === playerID\r\n                  ? `your new card is ${G.turnLog.challenge.swapCard.character}.\\n`\r\n                  : \"\"\r\n              }waiting for ${\r\n                G.turnLog.challenge.challenger.name\r\n              } to give up an influence`\r\n            );\r\n            setMsgLoading(true);\r\n          }\r\n        }\r\n        // challenge succeeds\r\n        else if (G.turnLog.challenge.successful) {\r\n          setMsg(\r\n            `${\r\n              G.turnLog.challenge.challenger.id === playerID\r\n                ? \"your\"\r\n                : `${G.turnLog.challenge.challenger.name}'s`\r\n            } challenge succeeds.`\r\n          );\r\n          setMsgLoading(false);\r\n          timer = setTimeout(() => {    // timer to allow players time to read announcements, but also advance the game \"automatically\" when necessary\r\n            if (G.turnLog.challenge.challenged.id === playerID) {\r\n              if (G.turnLog.action === \"steal\") {\r\n                if (Object.keys(G.turnLog.blockedBy).length !== 0) {\r\n                  moves.executeAction();\r\n                }\r\n                moves.endTurn();\r\n              } else if (\r\n                (G.turnLog.action === \"assassinate\" &&\r\n                  playerID === G.turnLog.target.id) ||\r\n                Object.keys(G.turnLog.blockedBy).length !== 0\r\n              ) {\r\n                moves.executeAction();\r\n              } else {\r\n                moves.endTurn();\r\n              }\r\n            }\r\n          }, 2000);\r\n        }\r\n        // challenge fails\r\n        else {\r\n          if (G.turnLog.challenge.challenged.id === playerID) {\r\n            setMsg(\r\n              `you reveal ${G.turnLog.challenge.revealedCard.name}.\\n${G.turnLog.challenge.challenger.name}'s challenge fails!`\r\n            );\r\n          } else {\r\n            setMsg(\r\n              `${G.turnLog.challenge.challenged.name} reveals ${\r\n                G.turnLog.challenge.revealedCard.name\r\n              }.\\n${\r\n                G.turnLog.challenge.challenger.id === playerID\r\n                  ? \"your\"\r\n                  : `${G.turnLog.challenge.challenger.name}'s`\r\n              } challenge fails!`\r\n            );\r\n          }\r\n          setMsgLoading(false);\r\n          if (\r\n            ctx.activePlayers.hasOwnProperty(G.turnLog.challenge.challenged.id)\r\n          ) {\r\n            timer = setTimeout(() => {    // timer to allow players time to read announcements, but also advance the game \"automatically\" when necessary\r\n              if (G.turnLog.challenge.challenged.id === playerID) {\r\n                if (\r\n                  G.turnLog.action !== \"exchange\" &&\r\n                  G.turnLog.action !== \"assassinate\" &&\r\n                  Object.keys(G.turnLog.blockedBy).length === 0\r\n                ) {\r\n                  moves.executeAction();\r\n                }\r\n                moves.continueTurn();\r\n              }\r\n            }, 3000);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // on block\r\n    else if (Object.keys(G.turnLog.blockedBy).length !== 0) {\r\n      const blocksWith =\r\n        G.turnLog.blockedBy.hasOwnProperty(\"character\") &&\r\n        G.turnLog.blockedBy.character !== \"\";\r\n      if (\r\n        G.turnLog.action === \"steal\" &&\r\n        G.turnLog.blockedBy.character === \"\"\r\n      ) {\r\n        if (playerID === G.turnLog.blockedBy.id) {\r\n          setMsg(\"choose a character to block with.\");\r\n          setMsgLoading(false);\r\n        }\r\n      } else if (!isYourTurn) {\r\n        let blockedMsg =\r\n          G.turnLog.blockedBy.id === playerID\r\n            ? `you block`\r\n            : `${G.turnLog.blockedBy.name} blocks`;\r\n        if (blocksWith) {\r\n          blockedMsg += ` with ${G.turnLog.blockedBy.character}`;\r\n        }\r\n        blockedMsg += \"!\";\r\n        setMsg(\r\n          `${blockedMsg}\\nwaiting for ${\r\n            blocksWith ? \"a\" : `${name}'s`\r\n          } response`\r\n        );\r\n        setMsgLoading(true);\r\n      } else {\r\n        setMsg(\r\n          `${G.turnLog.blockedBy.name} blocks your ${\r\n            G.turnLog.action === \"assassinate\"\r\n              ? \"assassination\"\r\n              : G.turnLog.action\r\n          }${blocksWith ? ` with ${G.turnLog.blockedBy.character}` : \"\"}.`\r\n        );\r\n        setMsgLoading(false);\r\n      }\r\n    }\r\n\r\n    // targetable actions i.e. coup, assassinate, steal\r\n    else if (playerTargetedActions.includes(G.turnLog.action)) {\r\n      let action =\r\n        G.turnLog.action === \"steal\" ? \"steal from\" : G.turnLog.action;\r\n      if (!isYourTurn) {\r\n        if (Object.keys(G.turnLog.target).length === 0) {\r\n          setMsg(`${name} is choosing someone to ${action}`);\r\n          setMsgLoading(true);\r\n        } else {\r\n          if (G.turnLog.action === \"coup\") {\r\n            setMsg(\r\n              `${name} initiates a coup against ${\r\n                G.turnLog.target.id === playerID ? \"you\" : G.turnLog.target.name\r\n              }`\r\n            );\r\n            setMsgLoading(true);\r\n          } else {\r\n            if (G.turnLog.target.id === playerID) {\r\n              setMsg(`${name} chooses to ${action} you.`);\r\n              setMsgLoading(false);\r\n            } else {\r\n              action =\r\n                G.turnLog.action === \"steal\" ? \"steals from\" : action + \"s\";\r\n              setMsg(\r\n                `${name} ${action} ${G.turnLog.target.name}.\\nwaiting for a response`\r\n              );\r\n              setMsgLoading(true);\r\n            }\r\n          }\r\n        }\r\n      } else if (Object.keys(G.turnLog.target).length === 0) {\r\n        setMsg(`choose a player to ${action}.`);\r\n        setMsgLoading(false);\r\n      } else if (G.turnLog.action === \"coup\") {\r\n        setMsg(\"select a character to coup.\");\r\n        setMsgLoading(false);\r\n      } else {\r\n        setMsg(`waiting for ${G.turnLog.target.name} to respond`);\r\n        setMsgLoading(true);\r\n      }\r\n    }\r\n\r\n    // any blockable or challengable action (trying to generalize when I can)\r\n    else if (ctx.activePlayers[ctx.currentPlayer] !== \"action\") {\r\n      if (!isYourTurn) {\r\n        setMsg(`${name} attempts to ${G.turnLog.action}.`);\r\n        setMsgLoading(false);\r\n      } else {\r\n        setMsg(`waiting for others to respond`);\r\n      }\r\n    }\r\n\r\n    if (timer) {\r\n      return () => clearTimeout(timer);\r\n    }\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [\r\n    G.turnLog,\r\n    ctx.activePlayers,\r\n    ctx.currentPlayer,\r\n    moves,\r\n    hand,\r\n    isYourTurn,\r\n    name,\r\n    playerID,\r\n  ]);\r\n\r\n  // on game over\r\n  useEffect(() => {\r\n    if (G.winner.id !== \"-1\") {\r\n      setMsg(\r\n        `Game over!\\n${name} ${\r\n          G.winner.id === playerID ? \"are\" : \"is\"\r\n        } the winner.`\r\n      );\r\n      setMsgLoading(false);\r\n    }\r\n  }, [G.winner, name, playerID]);\r\n\r\n  return (\r\n    <div\r\n      className={classNames(\"announcement-area\", {\r\n        \"announcement-area-offset\": msgLoading,\r\n      })}\r\n    >\r\n      <div\r\n        key={msg}\r\n        className={classNames(\"turn-message\", { \"msg-loading\": msgLoading })}\r\n      >\r\n        {msg}\r\n        <span style={{ marginLeft: \"0.01vw\" }}></span>\r\n      </div>\r\n      <ChoosingPanel {...props} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnnouncementArea;\r\n","import React, { useState } from \"react\";\r\nimport uniqid from \"uniqid\";\r\nimport classNames from \"classnames\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faSkullCrossbones,\r\n  faCrown,\r\n  faThumbsUp,\r\n  faThumbsDown,\r\n  faDoorClosed,\r\n  faDoorOpen,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./Player.scss\";\r\n\r\nconst Player = ({ G, ctx, playerID, moves, i }) => {\r\n  const [revealHand, setRevealHand] = useState(false);\r\n  const yourPlayer = G.players[playerID];\r\n  const player = G.players[i];\r\n  const gameOver = G.winner.id !== \"-1\";\r\n\r\n  const hand = [];\r\n  player.hand.forEach((card, cardIndex) => {\r\n    let revealCard = false;\r\n    if (ctx.activePlayers[i] === \"revealCard\") {\r\n      revealCard = G.turnLog.challenge.revealedCard.length !== 0 && card.id === G.turnLog.challenge.revealedCard.id;\r\n    }\r\n    hand.push(\r\n      card.discarded ? (\r\n        <div key={uniqid()} className=\"character-card character-card-discarded\"></div>\r\n      ) : (\r\n        <img\r\n          onDragStart={(e) => {\r\n            e.preventDefault();\r\n          }}\r\n          draggable={false}\r\n          key={player.name + cardIndex}\r\n          className={classNames(\"character-card\", {\r\n            \"character-card-reveal\": revealCard,\r\n          })}\r\n          src={gameOver || revealCard || revealHand ? card.front : \"/images/back.PNG\"} // on game over, reveal the winner's cards to everyone\r\n          alt={gameOver || revealCard || revealHand ? card.character : \"card\"}\r\n        />\r\n      )\r\n    );\r\n  });\r\n\r\n  const isCurrentPlayer = i === parseInt(ctx.currentPlayer);\r\n  const isYourTurn = playerID === ctx.currentPlayer;\r\n  const playerTargetedActions = [\"coup\", \"assassinate\", \"steal\"];\r\n  const canSelectPlayer =\r\n    playerTargetedActions.includes(G.turnLog.action) &&\r\n    isYourTurn &&\r\n    Object.keys(G.turnLog.target).length === 0 &&\r\n    !player.isOut;\r\n  const canRevealHand = yourPlayer.isOut && !player.isOut && !gameOver;\r\n  const targeted = i === parseInt(G.turnLog.target.id);\r\n\r\n  const updateReveal = () => {\r\n    setRevealHand(!revealHand);\r\n  };\r\n\r\n  // for coup, player must select another player as the target\r\n  const setTarget = () => {\r\n    if (canSelectPlayer) {\r\n      const { name, id } = player;\r\n      moves.setTarget({ name, id });\r\n    }\r\n  };\r\n\r\n  /* animation/styling stuff */\r\n\r\n  let animate = \"\";\r\n  if (player.isOut) {\r\n    animate = \"player-out\";\r\n  } else if (gameOver) {\r\n    animate = \"player-winner\";\r\n  } else if (isCurrentPlayer) {\r\n    animate = \"player-entered\";\r\n  } else if (isYourTurn) {\r\n    if (canSelectPlayer) {\r\n      animate = \"player-select\";\r\n    } else if (targeted) {\r\n      animate = \"player-selected\";\r\n    }\r\n  }\r\n\r\n  if (canRevealHand) {\r\n    animate += \" player-select-reveal\";\r\n  }\r\n\r\n  // little icon to indicate a player's counterresponse\r\n  let iconColor = \"\";\r\n  if (G.turnLog.responses[i] === \"allow\") {\r\n    iconColor = \"#008000\";\r\n  } else if (G.turnLog.responses[i] === \"block\") {\r\n    iconColor = \"#8b0000\";\r\n  } else if (G.turnLog.responses[i] === \"challenge\") {\r\n    iconColor = \"#42526C\";\r\n  }\r\n\r\n  const getBottomRow = (status, icon) => (\r\n    <>\r\n      {icon}&nbsp;({status})&nbsp;{icon}\r\n    </>\r\n  );\r\n\r\n  const bottomRow = () => {\r\n    if (G.gameOver.playAgain.includes(i.toString())) {\r\n      return getBottomRow(\"ready\", <FontAwesomeIcon icon={faDoorOpen} />);\r\n    } else if (G.gameOver.left.includes(i.toString())) {\r\n      return getBottomRow(\"left\", <FontAwesomeIcon icon={faDoorClosed} />);\r\n    } else if (player.isOut) {\r\n      return getBottomRow(\"exiled\", <FontAwesomeIcon icon={faSkullCrossbones} />);\r\n    } else {\r\n      return getBottomRow(\"winner\", <FontAwesomeIcon icon={faCrown} />);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`player ${animate}`}\r\n      onClick={() => {\r\n        canRevealHand ? updateReveal() : setTarget();\r\n      }}\r\n    >\r\n      <div className=\"player-body\">\r\n        <div className=\"player-name\">{player.name}</div>\r\n        <div className=\"no-gutters d-flex\" style={{ height: \"60%\" }}>\r\n          {hand}\r\n        </div>\r\n        {player.isOut || gameOver ? (\r\n          <div className=\"exiled-text\">{bottomRow()}</div>\r\n        ) : (\r\n          <div className=\"coin-row no-gutters\">\r\n            <div className=\"w-50 h-100 d-flex justify-content-end\" style={{ paddingRight: \"1%\" }}>\r\n              <img\r\n                onDragStart={(e) => {\r\n                  e.preventDefault();\r\n                }}\r\n                draggable={false}\r\n                className=\"img-fluid h-100\"\r\n                src=\"/images/coin.png\"\r\n                alt=\"coins\"\r\n              />\r\n            </div>\r\n            <div className=\"w-50 d-flex align-items-center\" style={{ paddingLeft: \"1%\" }}>\r\n              {player.coins}\r\n              <div className=\"response-icon\" style={{ color: `${iconColor}` }}>\r\n                {G.turnLog.responses[i] !== \"\" ? (\r\n                  G.turnLog.responses[i] === \"allow\" ? (\r\n                    <FontAwesomeIcon icon={faThumbsUp} />\r\n                  ) : (\r\n                    <FontAwesomeIcon icon={faThumbsDown} />\r\n                  )\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport Player from \"./Player\";\r\nimport \"./Players.scss\";\r\n\r\n// row of players\r\nconst Players = (props) => {\r\n  const { ctx, playerID } = props;\r\n  const players = [];\r\n  for (let index = 0; index < ctx.numPlayers; index++) {\r\n    const i = parseInt(ctx.playOrder[index]);\r\n    if (i !== parseInt(playerID)) {\r\n      players.push(\r\n        <div key={props.G.players[i].id + props.G.players[i].name} className=\"player-container\">\r\n          <Player {...props} i={i} />\r\n        </div>\r\n      );\r\n    } else if (\r\n      ctx.playOrder[index] !== ctx.playOrder[0] &&\r\n      ctx.playOrder[index] !== ctx.playOrder[ctx.numPlayers - 1]\r\n    ) {\r\n      // dashed line to indicate where you are in the turn order (i.e. between these two players). only applicable if you're not the first or last player\r\n      players.push(\r\n        <div key=\"position marker\" className=\"d-flex align-items-center h-100\">\r\n          <div\r\n            className={classNames(\"position-marker\", {\r\n              \"position-marker-active\": playerID === ctx.currentPlayer,\r\n            })}\r\n          ></div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  return <div className=\"players\">{players}</div>;\r\n};\r\n\r\nexport default Players;\r\n","import React from \"react\";\r\nimport uniqid from \"uniqid\";\r\nimport classNames from \"classnames\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faSkullCrossbones,\r\n  faCrown,\r\n  faThumbsUp,\r\n  faThumbsDown,\r\n  faDoorClosed,\r\n  faDoorOpen,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./YourPlayer.scss\";\r\n\r\nconst YourPlayer = ({ G, ctx, playerID, moves }) => {\r\n  const player = G.players[playerID];\r\n  const isYourTurn = playerID === ctx.currentPlayer;\r\n  const gameOver = G.winner.id !== \"-1\";\r\n\r\n  let cardSelectable =\r\n    (G.turnLog.exchange.hasOwnProperty(\"newHand\") && ctx.activePlayers[playerID] === \"action\") ||\r\n    (ctx.activePlayers[playerID] && ctx.activePlayers[playerID].includes(\"lose\"));\r\n  let cardSelected = false;\r\n  // for exchange\r\n  if (ctx.activePlayers[playerID] === \"revealCard\") {\r\n    cardSelectable = Object.keys(G.turnLog.challenge.loser).length === 0;\r\n    cardSelected = !cardSelectable;\r\n  }\r\n\r\n  const revealCard = (playerID, cardID) => {\r\n    moves.revealCard(playerID, cardID);\r\n  };\r\n\r\n  const loseCard = (playerID, cardID) => {\r\n    moves.loseCardAndShuffle(playerID, cardID);\r\n  };\r\n\r\n  const setHand = (cardID) => {\r\n    moves.setHand(cardID);\r\n  };\r\n\r\n  const hand = [];\r\n  player.hand.forEach((card, index) => {\r\n    let cardClass = \"\";\r\n    if (\r\n      (cardSelected && G.turnLog.challenge.revealedCard.id === card.id) ||\r\n      (isYourTurn && G.turnLog.exchange.hasOwnProperty(\"newHand\") && G.turnLog.exchange.newHand.includes(card.id))\r\n    ) {\r\n      cardClass = \"card-selected\";\r\n    } else if (cardSelectable) {\r\n      cardClass = \"card-selectable\";\r\n    }\r\n\r\n    hand.push(\r\n      card.discarded ? (\r\n        <div key={uniqid()} className=\"character-card character-card-discarded\"></div>\r\n      ) : (\r\n        <img\r\n          onDragStart={(e) => {\r\n            e.preventDefault();\r\n          }}\r\n          draggable={false}\r\n          key={player.id + card.character + index}\r\n          className={`character-card ${cardClass}`}\r\n          src={card.front}\r\n          onClick={() => {\r\n            // handle card selection logic\r\n            if (ctx.activePlayers[playerID] && ctx.activePlayers[playerID].includes(\"lose\") && !card.discarded) {\r\n              loseCard(playerID, card.id);\r\n            } else if (G.turnLog.exchange.hasOwnProperty(\"newHand\") && isYourTurn) {\r\n              setHand(card.id);\r\n            } else if (cardSelectable && !card.discarded) {\r\n              revealCard(playerID, card.id);\r\n            }\r\n          }}\r\n          alt={card.character}\r\n        />\r\n      )\r\n    );\r\n  });\r\n\r\n  /* animation/styling stuff */\r\n\r\n  let animate = \"\";\r\n  if (player.isOut) {\r\n    animate = \"your-player-out\";\r\n  } else if (gameOver) {\r\n    animate = \"your-player-winner\";\r\n  } else if (isYourTurn) {\r\n    animate = \"your-player-enter\";\r\n  } else {\r\n    animate = \"your-player-inactive\";\r\n  }\r\n\r\n  // little icon to indicate your counterresponse\r\n  let iconColor = \"\";\r\n  if (G.turnLog.responses[playerID] === \"allow\") {\r\n    iconColor = \"#008000\";\r\n  } else if (G.turnLog.responses[playerID] === \"block\") {\r\n    iconColor = \"#8b0000\";\r\n  } else if (G.turnLog.responses[playerID] === \"challenge\") {\r\n    iconColor = \"#42526C\";\r\n  }\r\n\r\n  const getBottomRow = (status, icon) => (\r\n    <>\r\n      {icon}&nbsp;({status})&nbsp;{icon}\r\n    </>\r\n  );\r\n\r\n  const bottomRow = () => {\r\n    if (G.gameOver.playAgain.includes(playerID)) {\r\n      return getBottomRow(\"ready\", <FontAwesomeIcon icon={faDoorOpen} />);\r\n    } else if (G.gameOver.left.includes(playerID)) {\r\n      return getBottomRow(\"left\", <FontAwesomeIcon icon={faDoorClosed} />);\r\n    } else if (player.isOut) {\r\n      return getBottomRow(\"exiled\", <FontAwesomeIcon icon={faSkullCrossbones} />);\r\n    } else {\r\n      return getBottomRow(\"winner\", <FontAwesomeIcon icon={faCrown} />);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classNames(`your-player ${animate}`, {\r\n        \"your-player-selected\": cardSelectable && !player.isOut,\r\n      })}\r\n    >\r\n      <div className=\"player-body\">\r\n        <div className=\"player-name\">{player.name} (You)</div>\r\n        <div className=\"no-gutters d-flex\" style={{ height: \"60%\" }}>\r\n          {hand}\r\n        </div>\r\n        {player.isOut || gameOver ? (\r\n          <div className=\"exiled-text\">{bottomRow()}</div>\r\n        ) : (\r\n          <div className=\"coin-row no-gutters\">\r\n            <div className=\"w-50 h-100 d-flex align-items-center justify-content-end\" style={{ paddingRight: \"1%\" }}>\r\n              <img\r\n                onDragStart={(e) => {\r\n                  e.preventDefault();\r\n                }}\r\n                draggable={false}\r\n                className=\"img-fluid\"\r\n                src=\"/images/coin.png\"\r\n                alt=\"coins\"\r\n                style={{ height: \"90%\" }}\r\n              />\r\n            </div>\r\n            <div\r\n              className=\"w-50 d-flex align-items-center justify-content-start\"\r\n              style={{ paddingLeft: \"1.2%\", fontSize: \"2.8vw\" }}\r\n            >\r\n              {player.coins}\r\n              <div className=\"response-icon\" style={{ paddingRight: \"1vw\", color: `${iconColor}` }}>\r\n                {G.turnLog.responses[playerID] !== \"\" ? (\r\n                  G.turnLog.responses[playerID] === \"allow\" ? (\r\n                    <FontAwesomeIcon icon={faThumbsUp} />\r\n                  ) : (\r\n                    <FontAwesomeIcon icon={faThumbsDown} />\r\n                  )\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YourPlayer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Players, YourPlayer, BottomBar, AnnouncementArea, ChatLogSettings } from \"./components\";\r\nimport \"./Board.css\";\r\n\r\nconst Board = (props) => {\r\n  const [revealDeck, setRevealDeck] = useState(false);\r\n\r\n  // player 0 has to set the player's actual screen names due to the way boardgame.io works\r\n  useEffect(() => {\r\n    if (props.playerID === \"0\") {\r\n      props.moves.changeNames(props.gameMetadata);\r\n    }\r\n  }, [props.playerID, props.moves, props.gameMetadata]);\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <Players {...props} />\r\n      <div className=\"your-container\">\r\n        <div className=\"your-player-container\">\r\n          <YourPlayer {...props} />\r\n        </div>\r\n        <div className=\"messages-actions-container\">\r\n          <AnnouncementArea {...props} />\r\n          <BottomBar {...props} revealDeck={revealDeck} />\r\n        </div>\r\n        <div className=\"cls-col\">\r\n          <ChatLogSettings {...props} revealDeck={revealDeck} setRevealDeck={setRevealDeck} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nBoard.propTypes = {\r\n  G: PropTypes.any.isRequired,\r\n  ctx: PropTypes.any.isRequired,\r\n  moves: PropTypes.any.isRequired,\r\n  playerID: PropTypes.string.isRequired,\r\n  gameMetadata: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default Board;\r\n","import { cards } from \"./cards\";\r\n\r\nexport const initializeGame = (numPlayers) => {\r\n  const deck = [];\r\n  const players = [];\r\n  // ensure >= 2 cards will always be left over regardless of player count\r\n  let numDuplicates = numPlayers <= 6 ? 3 : 4;\r\n\r\n  // create (unshuffled) deck\r\n  cards.forEach((card) => {\r\n    for (let i = 0; i < numDuplicates; i++) {\r\n      deck.push(card);\r\n    }\r\n  });\r\n\r\n  shuffle(deck);\r\n\r\n  // give each player their starting cards and coins, initialize their own player state\r\n  for (let i = 0; i < numPlayers; i++) {\r\n    players.push({\r\n      name: \"\",\r\n      isOut: false,\r\n      hand: [\r\n        { ...deck.pop(), discarded: false, id: 0 },\r\n        { ...deck.pop(), discarded: false, id: 1 },\r\n      ],\r\n      coins: 2,\r\n      id: `${i}`,\r\n    });\r\n  }\r\n\r\n  return { deck, players };\r\n};\r\n\r\nexport const getPlayOrder = (numPlayers) => {\r\n  const playOrder = Array(numPlayers)\r\n    .fill()\r\n    .map((_, i) => \"\" + i);\r\n  shuffle(playOrder);\r\n  return playOrder;\r\n};\r\n\r\nexport const shuffle = (arr) => {\r\n  // shuffle deck (using Fisher-Yates algorithm, might've been overkill since deck is only ~20 at most)\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n};\r\n","import { shuffle } from \"../initializer\";\r\n\r\n// update turnLog in one line\r\nconst logTurn = (turnLog, action, player, successful, target, blockedBy, challenge, responses, exchange) => {\r\n  turnLog.action = action;\r\n  turnLog.player = player;\r\n  turnLog.successful = successful;\r\n  turnLog.target = target;\r\n  turnLog.blockedBy = blockedBy;\r\n  turnLog.challenge = challenge;\r\n  turnLog.responses = responses;\r\n  turnLog.exchange = exchange;\r\n};\r\n\r\n// update statistics\r\nconst logStats = (turnLog, statistics) => {\r\n  // find index\r\n  let i = 0;\r\n  while (i < statistics.length && statistics[i][0] !== turnLog.action) {\r\n    i++;\r\n  }\r\n  let row = statistics[i];\r\n  if (turnLog.successful) {\r\n    row[1]++;\r\n  } else {\r\n    row[2]++;\r\n  }\r\n  if (turnLog.blockedBy && Object.keys(turnLog.blockedBy).length !== 0) {\r\n    row[3]++;\r\n  }\r\n  if (\r\n    turnLog.challenge &&\r\n    Object.keys(turnLog.challenge).length !== 0 &&\r\n    turnLog.player.id === turnLog.challenge.challenged.id\r\n  ) {\r\n    // only for direct challenges to the player's action, not to a character counteraction (e.g. block)\r\n    row[4]++;\r\n  }\r\n};\r\n\r\n// reset responses, which consist of actions and counteractions, where index represents playerID\r\nconst resetResponses = (numPlayers) => {\r\n  const responses = [];\r\n  for (let i = 0; i < numPlayers; i++) {\r\n    responses[i] = \"\";\r\n  }\r\n  return responses;\r\n};\r\n\r\nconst updateIsOut = (player) => {\r\n  if (player.hand.filter((card) => !card.discarded).length === 0) {\r\n    // if both cards are discarded, then player is out\r\n    player.isOut = true;\r\n  }\r\n};\r\n\r\nconst getNumAlivePlayers = (G) => {\r\n  return G.players.filter((player) => !player.isOut).length;\r\n};\r\n\r\nconst checkForWinner = (G) => {\r\n  const playersAlive = G.players.filter((player) => !player.isOut);\r\n  if (playersAlive.length === 1) {\r\n    // game is over when only 1 player is alive at the end of each turn\r\n    G.winner.name = playersAlive[0].name;\r\n    G.winner.id = playersAlive[0].id;\r\n  }\r\n};\r\n\r\n// returns cards to the deck (e.g. exchange or losing a card)\r\nconst returnToDeck = (G, cards) => {\r\n  cards.forEach((card) => {\r\n    G.deck.push(card);\r\n  });\r\n  shuffle(G.deck);\r\n};\r\n\r\nexport { logTurn, logStats, resetResponses, updateIsOut, getNumAlivePlayers, checkForWinner, returnToDeck };\r\n","import { getNumAlivePlayers, logTurn } from \"./helper\";\r\nimport { loseCardAndShuffle } from \"./intermediary\";\r\n\r\n/* ---- Actions ---- */\r\nconst income = (G, ctx) => {\r\n  G.players[ctx.currentPlayer].coins++;\r\n\r\n  const { name, id } = G.players[ctx.currentPlayer];\r\n  logTurn(G.turnLog, \"income\", { name, id }, true);\r\n  ctx.events.endTurn();\r\n};\r\n\r\n// after player selects coup as action and a target...\r\nconst coup = (G, ctx, targetCharacter) => {\r\n  G.turnLog.target.character = targetCharacter;\r\n  G.players[ctx.currentPlayer].coins -= 7;\r\n  // check if target has the targeted character card in his hand\r\n  let indexes = [];\r\n  const hand = G.players[G.turnLog.target.id].hand;\r\n  for (let i = 0; i < hand.length; i++) {\r\n    const card = hand[i];\r\n    if (!card.discarded && card.character === targetCharacter) {\r\n      indexes.push(i);\r\n    }\r\n  }\r\n  const hasCard = indexes.length > 0;\r\n  G.turnLog.successful = hasCard;\r\n  if (hasCard) {\r\n    // if target player has duplicate cards that match the coup, randomly select one\r\n    const index = indexes.length === 2 ? Math.round(Math.random()) : indexes[0];\r\n    loseCardAndShuffle(G, ctx, G.turnLog.target.id, index);\r\n  }\r\n  ctx.events.endTurn();\r\n};\r\n\r\nconst executeAction = (G, ctx) => {\r\n  if (G.turnLog.action === \"foreign aid\") {\r\n    G.players[ctx.currentPlayer].coins += 2;\r\n    if (Object.keys(G.turnLog.blockedBy).length !== 0) {\r\n      ctx.events.endTurn();\r\n    }\r\n  } else if (G.turnLog.action === \"tax\") {\r\n    G.players[ctx.currentPlayer].coins += 3;\r\n  } else if (G.turnLog.action === \"exchange\") {\r\n    G.turnLog.exchange.newHand = getNewHand(G.players[ctx.currentPlayer].hand);\r\n    // drawnCards is already set (for image optimization attempt), simply draw\r\n    G.deck.pop();\r\n    G.deck.pop();\r\n  } else if (G.turnLog.action === \"assassinate\") {\r\n    if (G.players[G.turnLog.target.id].isOut) {\r\n      ctx.events.endTurn();\r\n    } else {\r\n      ctx.events.setActivePlayers({\r\n        all: \"idle\",\r\n        value: {\r\n          [G.turnLog.target.id]: \"loseAssassinate\",\r\n        },\r\n      });\r\n    }\r\n  } else if (G.turnLog.action === \"steal\") {\r\n    if (G.players[G.turnLog.target.id].coins < 2) {\r\n      // allows player to steal 0 or 1 coin, and minimum # coins a player can have is 0\r\n      G.players[ctx.currentPlayer].coins += G.players[G.turnLog.target.id].coins;\r\n      G.players[G.turnLog.target.id].coins = 0;\r\n    } else {\r\n      G.players[ctx.currentPlayer].coins += 2;\r\n      G.players[G.turnLog.target.id].coins -= 2;\r\n    }\r\n  }\r\n};\r\n\r\n/* ---- Counteractions ---- */\r\n\r\n// can \"allow\" for foreign aid and any character action\r\nconst allow = (G, ctx, playerID) => {\r\n  const oneOnOneActions = [\"assassinate\", \"steal\"]; // only the targeted player can respond\r\n  G.turnLog.responses[playerID] = \"allow\";\r\n  if (ctx.currentPlayer === playerID) {\r\n    // if another/targeted player blocks your action, and you allow that block (so your action is unsuccessful)\r\n    ctx.events.endTurn();\r\n  } else if (oneOnOneActions.includes(G.turnLog.action)) {\r\n    // targeted player allows your action\r\n    G.turnLog.successful = true;\r\n    executeAction(G, ctx);\r\n    if (G.turnLog.action === \"steal\") {\r\n      ctx.events.endTurn();\r\n    }\r\n  } else if (\r\n    // for foregin aid, if you are the last person to allow, then the action goes through\r\n    G.turnLog.responses.filter((response) => response === \"allow\").length ===\r\n    getNumAlivePlayers(G) - 1\r\n  ) {\r\n    G.turnLog.successful = true;\r\n    executeAction(G, ctx);\r\n    // end for immediate actions (i.e. actions that simply increase your coins), else return control back to currentPlayer to complete the action\r\n    const immediateActions = [\"foreign aid\", \"tax\"];\r\n    if (immediateActions.includes(G.turnLog.action)) {\r\n      ctx.events.endTurn();\r\n    } else {\r\n      ctx.events.setActivePlayers({\r\n        currentPlayer: \"action\",\r\n        others: \"idle\",\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n// can \"block\" for foreign aid, assassinate and steal\r\nconst block = (G, ctx, playerID, character) => {\r\n  G.turnLog.responses[playerID] = \"block\";\r\n  if (Object.keys(G.turnLog.blockedBy).length === 0) {\r\n    G.turnLog.blockedBy = { name: G.players[playerID].name, id: playerID };\r\n  }\r\n\r\n  if (G.turnLog.action === \"steal\") {\r\n    if (!G.turnLog.blockedBy.hasOwnProperty(\"character\")) {\r\n      G.turnLog.blockedBy.character = \"\";\r\n    } else {\r\n      G.turnLog.blockedBy.character = character;\r\n      ctx.events.setActivePlayers({\r\n        currentPlayer: \"challenge\",\r\n        others: \"idle\",\r\n      });\r\n    }\r\n  } else {\r\n    if (G.turnLog.action === \"assassinate\") {\r\n      G.turnLog.blockedBy.character = \"Contessa\";\r\n    } else {\r\n      // action === foreign aid\r\n      G.turnLog.blockedBy.character = \"Duke\";\r\n    }\r\n    ctx.events.setActivePlayers({\r\n      currentPlayer: \"challenge\",\r\n      others: \"idle\",\r\n    });\r\n  }\r\n};\r\n\r\nconst initiateChallenge = (G, ctx, playerID) => {\r\n  G.turnLog.responses[playerID] = \"challenge\";\r\n  const isBlocked = Object.keys(G.turnLog.blockedBy).length !== 0;\r\n  const challengedID = isBlocked ? G.turnLog.blockedBy.id : ctx.currentPlayer;\r\n  G.turnLog.challenge = {\r\n    challenger: { name: G.players[playerID].name, id: playerID },\r\n    challenged: { name: G.players[challengedID].name, id: challengedID },\r\n    characters: getChallengeCharacters(G, isBlocked),\r\n    successful: false,\r\n    loser: {},\r\n    revealedCard: {},\r\n    swapCard: {},\r\n  };\r\n\r\n  ctx.events.setActivePlayers({\r\n    all: \"idle\",\r\n    value: {\r\n      [challengedID]: \"revealCard\",\r\n    },\r\n  });\r\n};\r\n\r\n/* ---- Helper functions ---- */\r\n\r\n// returns what characters can challenge the current action\r\nconst getChallengeCharacters = (G, isBlocked) => {\r\n  const action = G.turnLog.action;\r\n  if (action === \"foreign aid\" || action === \"tax\") {\r\n    return [\"Duke\"];\r\n  } else if (action === \"exchange\") {\r\n    return [\"Ambassador\"];\r\n  } else if (action === \"assassinate\") {\r\n    return isBlocked ? [\"Contessa\"] : [\"Assassin\"];\r\n  } else if (action === \"steal\") {\r\n    return isBlocked ? [G.turnLog.blockedBy.character] : [\"Captain\"];\r\n  }\r\n};\r\n\r\n// returns a new, empty hand for preparing an exchange (discarded cards are marked by a -1)\r\nconst getNewHand = (hand) => {\r\n  const newHand = [];\r\n  hand.forEach((card) => {\r\n    if (card.discarded) {\r\n      newHand.push(-1);\r\n    } else {\r\n      newHand.push(\"\");\r\n    }\r\n  });\r\n  return newHand;\r\n};\r\n\r\nexport { income, coup, executeAction }; // actions\r\nexport { allow, block, initiateChallenge }; // counteractions\r\n","import { Card } from \"../cards\";\r\nimport { returnToDeck, updateIsOut } from \"./helper\";\r\nimport { executeAction } from \"./main\";\r\n\r\n/* ---- Intermediary Actions ---- */\r\n\r\n// Update turnLog as soon as player selects an action, and prepare as necessary (updating active players, setting up ambassador's drawn cards)\r\nconst prepAction = (G, ctx, action) => {\r\n  G.turnLog.action = action;\r\n  const { name, id } = G.players[ctx.currentPlayer];\r\n  G.turnLog.player = { name, id };\r\n  // blockable actions\r\n  if (action === \"foreign aid\") {\r\n    ctx.events.setActivePlayers({\r\n      currentPlayer: \"idle\",\r\n      others: \"block\",\r\n    });\r\n  }\r\n  // (ONLY) challengable actions\r\n  else if (action === \"exchange\" || action === \"tax\") {\r\n    ctx.events.setActivePlayers({\r\n      currentPlayer: \"idle\",\r\n      others: \"challenge\",\r\n    });\r\n    // prep for successful exchange\r\n    // top of deck is at the \"end\" of the deck\r\n    G.turnLog.exchange.drawnCards = [\r\n      { ...G.deck[G.deck.length - 1], id: 2 },\r\n      { ...G.deck[G.deck.length - 2], id: 3 },\r\n    ];\r\n  }\r\n};\r\n\r\n// Character actions: coup, steal, assassinate\r\nconst setTarget = (G, ctx, target) => {\r\n  G.turnLog.target = target;\r\n  if (G.turnLog.action === \"steal\" || G.turnLog.action === \"assassinate\") {\r\n    if (G.turnLog.action === \"assassinate\") {\r\n      // subtract coins after assassin choose target\r\n      G.players[ctx.currentPlayer].coins -= 3;\r\n    }\r\n    ctx.events.setActivePlayers({\r\n      // steal and assassinate can be blocked or challenged\r\n      all: \"idle\",\r\n      value: {\r\n        [target.id]: \"blockOrChallenge\",\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n// Character action: exchange, choose one card at a time\r\nconst setHand = (G, ctx, cardID) => {\r\n  const { hand } = G.players[ctx.currentPlayer];\r\n  const { newHand } = G.turnLog.exchange;\r\n  if (!newHand.includes(cardID)) {\r\n    let index = newHand.findIndex((card) => card === \"\"); // find next available card in hand (either 0 or 1)\r\n    newHand[index] = cardID;\r\n  }\r\n\r\n  // done choosing: update player's hand accordingly\r\n  if (!newHand.includes(\"\")) {\r\n    const oldHand = [];\r\n    for (let i = 0; i < hand.length; i++) {\r\n      const { character, front } = hand[i];\r\n      oldHand.push({ character, front });\r\n    }\r\n    for (let i = 0; i < newHand.length; i++) {\r\n      const newCardID = newHand[i];\r\n      if (newCardID !== -1) {\r\n        // -1 indicates card is discarded\r\n        const newCard =\r\n          newCardID < 2 // check whether to update from the original hand or from the two cards draw\r\n            ? oldHand[newCardID]\r\n            : G.turnLog.exchange.drawnCards[newCardID - 2];\r\n        hand[i].character = newCard.character;\r\n        hand[i].front = newCard.front;\r\n      }\r\n    }\r\n    // return cards that weren't chosen to the deck\r\n    let notUsed = [];\r\n    for (let i = 0; i <= 1; i++) {\r\n      if (!hand[i].discarded) {\r\n        notUsed.push(i);\r\n      }\r\n    }\r\n    notUsed.push(2);\r\n    notUsed.push(3);\r\n    // notUsed contains all the cards you could've chosen: now, only choose the cards that weren't chosen\r\n    let i = notUsed.length;\r\n    while (i--) {\r\n      if (newHand.includes(notUsed[i])) {\r\n        notUsed.splice(i, 1);\r\n      }\r\n    }\r\n    // select those unchosen cards from either the original hand or from the two cards drawn\r\n    for (let i = 0; i < notUsed.length; i++) {\r\n      notUsed[i] = notUsed[i] < 2 ? oldHand[notUsed[i]] : G.turnLog.exchange.drawnCards[notUsed[i] - 2];\r\n    }\r\n    returnToDeck(G, notUsed);\r\n    ctx.events.endTurn();\r\n  }\r\n};\r\n\r\n/* ---- Challenge Responses ---- */\r\n\r\nconst revealCard = (G, ctx, playerID, cardID) => {\r\n  G.turnLog.challenge.revealedCard = {\r\n    name: G.players[playerID].hand[cardID].character,\r\n    id: cardID,\r\n  };\r\n  if (G.turnLog.challenge.characters.includes(G.turnLog.challenge.revealedCard.name)) {\r\n    // failed challenge, so the action goes through.\r\n    G.turnLog.successful = true;\r\n    G.turnLog.challenge.loser = {\r\n      name: G.turnLog.challenge.challenger.name,\r\n      id: G.turnLog.challenge.challenger.id,\r\n    };\r\n    returnToDeck(G, [Card(G.players[playerID].hand[cardID].character, G.players[playerID].hand[cardID].front)]);\r\n\r\n    const { character, front } = G.deck.pop();\r\n    G.turnLog.challenge.swapCard = { character, front };\r\n  } else {\r\n    // successful challenge, loser of challenge must give up card.\r\n    G.turnLog.challenge.successful = true;\r\n    G.turnLog.challenge.loser = {\r\n      name: G.turnLog.challenge.challenged.name,\r\n      id: G.turnLog.challenge.challenged.id,\r\n    };\r\n    loseCardAndShuffle(G, ctx, playerID, cardID);\r\n  }\r\n\r\n  // if there was a block previously, then the successful is the opposite\r\n  if (Object.keys(G.turnLog.blockedBy).length !== 0) {\r\n    G.turnLog.successful = !G.turnLog.successful;\r\n  }\r\n};\r\n\r\n// Character action: losing a challenge, assassinate, exchange, coup\r\nconst loseCardAndShuffle = (G, ctx, playerID, cardID) => {\r\n  returnToDeck(G, [Card(G.players[playerID].hand[cardID].character, G.players[playerID].hand[cardID].front)]);\r\n\r\n  G.players[playerID].hand[cardID] = {\r\n    character: \"\",\r\n    front: \"\",\r\n    discarded: true,\r\n    id: cardID,\r\n  };\r\n  updateIsOut(G.players[playerID]);\r\n\r\n  if (\r\n    // Player gets assassinated\r\n    G.turnLog.action === \"assassinate\" &&\r\n    playerID === G.turnLog.target.id &&\r\n    ctx.activePlayers[playerID] === \"loseCard\"\r\n  ) {\r\n    if (G.players[playerID].isOut) {\r\n      ctx.events.endTurn();\r\n    } else {\r\n      // Possibility of assassin double kill: after player loses challenge and gives up an influence, then carry out the successful assassination\r\n      ctx.events.setActivePlayers({\r\n        all: \"idle\",\r\n        value: {\r\n          [playerID]: \"loseAssassinate\",\r\n        },\r\n      });\r\n    }\r\n  } else if (\r\n    // Player attempts to exchange, gets challenged, and reveals ambassador successfully.\r\n    G.turnLog.action === \"exchange\" &&\r\n    Object.keys(G.turnLog.challenge) !== 0 &&\r\n    !G.turnLog.challenge.successful\r\n  ) {\r\n    // redraw with the new deck (after returning ambassador to the deck)\r\n    // no possibility of array out of bounds because the game starts out with at least 2 cards in deck\r\n    G.turnLog.exchange.drawnCards = [\r\n      { ...G.deck[G.deck.length - 1], id: 2 },\r\n      { ...G.deck[G.deck.length - 2], id: 3 },\r\n    ];\r\n    executeAction(G, ctx);\r\n    ctx.events.setActivePlayers({\r\n      currentPlayer: \"action\",\r\n      others: \"idle\",\r\n    });\r\n  } else if (\r\n    // Player gets couped or loses challenge\r\n    G.turnLog.action === \"coup\" ||\r\n    ctx.activePlayers[playerID].includes(\"lose\")\r\n  ) {\r\n    ctx.events.endTurn();\r\n  }\r\n};\r\n\r\nconst continueTurn = (G, ctx) => {\r\n  // winner of challenge draws a new card (this occurs after revealing the correct card)\r\n  const newCard = G.players[G.turnLog.challenge.challenged.id].hand[G.turnLog.challenge.revealedCard.id];\r\n  newCard.character = G.turnLog.challenge.swapCard.character;\r\n  newCard.front = G.turnLog.challenge.swapCard.front;\r\n  // loser of challenge has to give up one card\r\n  ctx.events.setActivePlayers({\r\n    all: \"idle\",\r\n    value: {\r\n      [G.turnLog.challenge.challenger.id]: \"loseCard\",\r\n    },\r\n  });\r\n};\r\n\r\nexport { prepAction, setTarget, setHand, revealCard, loseCardAndShuffle, continueTurn };\r\n","const message = (G, ctx, id, content) => {\r\n  G.chat.push({ id, content });\r\n  // TODO: save chat and game state data into database... don't want to clutter poor webpage with chat if it gets flooded\r\n  if (G.chat.length > 35) {\r\n    G.chat.shift();\r\n  }\r\n};\r\n\r\nconst changeNames = (G, ctx, playerList) => {\r\n  for (let i = 0; i < playerList.length; i++) {\r\n    G.players[i].name = playerList[i].name;\r\n  }\r\n};\r\n\r\n/*---- TODO: early leave ---- */\r\nconst endTurn = (G, ctx) => {\r\n  ctx.events.endTurn();\r\n};\r\n\r\nconst playAgain = (G, ctx, id) => {\r\n  G.gameOver.playAgain.push(id);\r\n};\r\n\r\nconst leave = (G, ctx, id) => {\r\n  const index = G.gameOver.playAgain.indexOf(id);\r\n  if (index > -1) {\r\n    G.gameOver.playAgain.splice(index, 1);\r\n  }\r\n  G.gameOver.left.push(id);\r\n};\r\n\r\nconst setNewRoom = (G, ctx, roomID) => {\r\n  G.gameOver.newRoomID = roomID;\r\n};\r\n\r\nexport { message, changeNames, endTurn, playAgain, leave, setNewRoom };\r\n","// to display to the chat once a turn ends\r\nexport const getTurnMsg = (turnLog) => {\r\n  let success = turnLog.successful ? \"successfully \" : \"unsuccessfully \";\r\n  let target = \"\";\r\n  if (turnLog.action === \"income\") {\r\n    success = \"\";\r\n  }\r\n\r\n  if (turnLog.action === \"coup\") {\r\n    target = ` ${turnLog.target.name} for ${turnLog.target.character}`;\r\n  } else if (turnLog.action === \"assassinate\") {\r\n    target = ` ${turnLog.target.name}`;\r\n  } else if (turnLog.action === \"steal\") {\r\n    target = ` from ${turnLog.target.name}`;\r\n  }\r\n\r\n  // addendum describes if there were counteractions to the player's action\r\n  let addendum = \".\";\r\n  if (turnLog.blockedBy && Object.keys(turnLog.blockedBy).length !== 0) {\r\n    addendum += `\\n⚒ ${turnLog.blockedBy.name} blocked with ${turnLog.blockedBy.character}.`;\r\n  }\r\n  if (turnLog.challenge && Object.keys(turnLog.challenge).length !== 0) {\r\n    const challengeSuccess = turnLog.challenge.successful ? \"success\" : \"fail\";\r\n    addendum += `\\n⚔ ${turnLog.challenge.challenger.name} challenged ${turnLog.challenge.challenged.name} (${challengeSuccess}).`;\r\n  }\r\n\r\n  const turnMsg = `${turnLog.player.name} ${success}${turnLog.action}${\r\n    turnLog.action === \"tax\" ? \"es\" : \"s\"\r\n  }${target}${addendum}`;\r\n\r\n  return turnMsg;\r\n};\r\n","import { logTurn, logStats, resetResponses, checkForWinner } from \"./logic/actions/helper\";\r\nimport {\r\n  prepAction,\r\n  setTarget,\r\n  setHand,\r\n  revealCard,\r\n  loseCardAndShuffle,\r\n  continueTurn,\r\n} from \"./logic/actions/intermediary\";\r\nimport { income, coup, executeAction, allow, block, initiateChallenge } from \"./logic/actions/main\";\r\nimport { message, changeNames, endTurn, leave, playAgain, setNewRoom } from \"./logic/actions/misc\";\r\nimport { initializeGame, getPlayOrder } from \"./logic/initializer\";\r\nimport { getTurnMsg } from \"./logic/messageBuilder\";\r\nimport { GAME_NAME } from \"../config\";\r\n\r\n/* ---- Setup ---- */\r\nconst setup = ({ numPlayers }) => {\r\n  const { deck, players } = initializeGame(numPlayers);\r\n\r\n  // initialize game state G\r\n  return {\r\n    deck: deck,\r\n    players: players,\r\n    winner: { name: \"\", id: \"-1\" },\r\n    gameOver: {\r\n      playAgain: [],\r\n      left: [],\r\n      newRoomID: \"\",\r\n    },\r\n    turnLog: {\r\n      action: \"\",\r\n      player: {},\r\n      successful: false,\r\n      target: {},\r\n      blockedBy: {},\r\n      challenge: {},\r\n      responses: resetResponses(numPlayers),\r\n      exchange: {},\r\n    },\r\n    statistics: [\r\n      [\"income\", 0, \"—\", \"—\", \"—\"],\r\n      [\"foreign aid\", 0, 0, 0, \"—\"],\r\n      [\"coup\", 0, 0, \"—\", \"—\"],\r\n      [\"tax\", 0, 0, \"—\", 0],\r\n      [\"assassinate\", 0, 0, 0, 0],\r\n      [\"steal\", 0, 0, 0, 0],\r\n      [\"exchange\", 0, 0, \"—\", 0],\r\n    ],\r\n    chat: [],\r\n  };\r\n};\r\n\r\nexport const Coup = {\r\n  name: `${GAME_NAME}`,\r\n  minPlayers: 2,\r\n  maxPlayers: 8,\r\n  setup: setup,\r\n  turn: {\r\n    onBegin: (G, ctx) => {\r\n      logTurn(G.turnLog, \"\", {}, false, {}, {}, {}, resetResponses(ctx.numPlayers), {});\r\n      ctx.events.setActivePlayers({ currentPlayer: \"action\", others: \"idle\" });\r\n    },\r\n    onEnd: (G, ctx) => {\r\n      logStats(G.turnLog, G.statistics);\r\n      G.chat.push({ id: \"-1\", content: getTurnMsg(G.turnLog), successful: G.turnLog.successful });\r\n      checkForWinner(G);\r\n    },\r\n    order: {\r\n      first: (G, ctx) => 0,\r\n      // find the next player who has cards (skip over players who are out)\r\n      next: ({ players }, { numPlayers, playOrder, playOrderPos }) => {\r\n        for (let i = 1; i <= numPlayers; i++) {\r\n          const nextIndex = (playOrderPos + i) % numPlayers;\r\n          const nextPlayer = playOrder[nextIndex];\r\n          if (!players[nextPlayer].isOut) {\r\n            return nextIndex;\r\n          }\r\n        }\r\n      },\r\n      playOrder: (G, { numPlayers }) => getPlayOrder(numPlayers),\r\n    },\r\n\r\n    stages: {\r\n      action: {\r\n        moves: {\r\n          income,\r\n          prepAction,\r\n          coup,\r\n          setTarget,\r\n          setHand,\r\n          executeAction,\r\n          continueTurn,\r\n          endTurn,\r\n          changeNames,\r\n          leave,\r\n          playAgain,\r\n          message,\r\n          setNewRoom,\r\n        },\r\n      },\r\n      block: {\r\n        moves: { allow, block, message },\r\n      },\r\n      challenge: {\r\n        moves: { allow, initiateChallenge, revealCard, message },\r\n      },\r\n      blockOrChallenge: {\r\n        moves: { allow, block, initiateChallenge, revealCard, message },\r\n      },\r\n      revealCard: {\r\n        moves: { revealCard, executeAction, continueTurn, endTurn, message },\r\n      },\r\n      loseCard: {\r\n        moves: { loseCardAndShuffle, endTurn, message },\r\n      },\r\n      loseAssassinate: {\r\n        moves: { loseCardAndShuffle, message },\r\n      },\r\n      idle: {\r\n        moves: { changeNames, message, leave, playAgain, setNewRoom },\r\n      },\r\n    },\r\n  },\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Client } from \"boardgame.io/react\";\r\nimport { SocketIO } from \"boardgame.io/multiplayer\";\r\nimport classNames from \"classnames\";\r\nimport { DEFAULT_PORT, APP_PRODUCTION } from \"../../config\";\r\nimport { Coup, Board } from \"../../Game\";\r\nimport Lobby from \"../Lobby/Lobby\";\r\nimport { LobbyAPI } from \"../../LobbyAPI\";\r\n\r\nimport \"./Room.scss\";\r\n\r\nconst api = new LobbyAPI();\r\n\r\nconst { origin, protocol, hostname } = window.location;\r\nconst SERVER_URL = APP_PRODUCTION ? origin : `${protocol}//${hostname}:${DEFAULT_PORT}`;\r\n\r\nconst CoupClient = Client({\r\n  game: Coup,\r\n  board: Board,\r\n  debug: false,\r\n  multiplayer: SocketIO({ server: SERVER_URL }),\r\n});\r\n\r\nconst Room = (props) => {\r\n  const { history } = props;\r\n  const { id } = useParams();\r\n  const [copied, setCopied] = useState(false);\r\n  const [players, setPlayers] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n\r\n  // check for newly joined players by comparing against the two players array (front-end and the api, and api is always slightly ahead)\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      api.getPlayers(id).then(\r\n        (players) => {\r\n          setPlayers(players);\r\n          const currPlayers = players.filter((player) => player.name); // only current players have a name field\r\n          if (currPlayers.length === players.length) {\r\n            setShow(true); // everyone has joined, show them the board\r\n          }\r\n        },\r\n        () => {\r\n          history.push(\"\", { invalidRoom: true }); // failed to join because room doesn't exist -> return user to homepage\r\n        }\r\n      );\r\n    }, 500);\r\n    if (show) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [show, players.length, id, history]);\r\n\r\n  // after user copies to clipboard\r\n  useEffect(() => {\r\n    let timeout;\r\n    if (copied) {\r\n      timeout = setTimeout(() => {\r\n        if (document.getSelection().toString() === id) {\r\n          document.getSelection().removeAllRanges();\r\n        }\r\n        setCopied(false);\r\n      }, 3000);\r\n    }\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [copied, id]);\r\n\r\n  const copyToClipboard = (e) => {\r\n    const textArea = document.getElementById(\"roomID\");\r\n    textArea.select();\r\n    document.execCommand(\"copy\");\r\n    e.target.focus();\r\n    setCopied(true);\r\n  };\r\n\r\n  const leaveRoom = () => {\r\n    api.leaveRoom(id, localStorage.getItem(\"id\"), localStorage.getItem(\"credentials\")).then(() => {\r\n      history.push(\"/\");\r\n    });\r\n  };\r\n\r\n  if (show) {\r\n    // don't include lobby because game doesn't show game title, game credits... it's fullscreen.\r\n    return (\r\n      <CoupClient\r\n        gameID={id}\r\n        numPlayers={players.length}\r\n        playerID={localStorage.getItem(\"id\")}\r\n        credentials={localStorage.getItem(\"credentials\")}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <Lobby>\r\n        <span className=\"title room-title\">Room</span>\r\n        <div className=\"players-list\">\r\n          {players.map((player) => {\r\n            if (player.name) {\r\n              return player.name + `${player.name === localStorage.getItem(\"name\") ? \" (You)\" : \"\"}\\n`;\r\n            } else {\r\n              return \"...\\n\";\r\n            }\r\n          })}\r\n        </div>\r\n        <div className=\"room-info-area\">\r\n          <div className=\"roomID-area\">\r\n            room id:\r\n            <textarea id=\"roomID\" value={id} readOnly />\r\n            <button\r\n              className={classNames(\"copy-btn\", { \"copied-btn\": copied })}\r\n              onClick={copyToClipboard}\r\n              disabled={copied}\r\n            >\r\n              {copied ? \"copied\" : \"copy\"}\r\n            </button>\r\n          </div>\r\n          <div className=\"room-info\">\r\n            Game will begin once all\r\n            {players.length === 0 ? \"\" : ` ${players.length}`} players have joined.\r\n          </div>\r\n          <button className=\"leave-btn\" onClick={leaveRoom}>\r\n            leave\r\n          </button>\r\n        </div>\r\n      </Lobby>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Room;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router, Route, Switch, Redirect, useHistory } from \"react-router-dom\";\r\nimport { Home, Room } from \"./pages\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\nimport \"./index.scss\";\r\n\r\nconst App = () => {\r\n  const history = useHistory(); // remember the history of user navigation\r\n\r\n  // defining the routing: (so far) homepage, lobby/room page. else redirect to home page for simplicity\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <Home history={history} />\r\n      </Route>\r\n      <Route exact path=\"/rooms/:id\">\r\n        <Room history={history} />\r\n      </Route>\r\n      <Redirect to=\"/\" />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}